// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean colour;
    static int screenBaseAddress;
    static Array powersOfTwo;

    /** Initializes the Screen. */
    function void init() {
        let colour = true;
        let screenBaseAddress = 16384;
        let powersOfTwo = Array.new(20);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        // We need to set this to -32768 to get the binary: 1000000000000000,
        // however the Jack compiler disallows this. This is a workaround:
        let powersOfTwo[15] = -32767 - 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int x, y;
        
        // Flip off the colour.
        do Screen.setColor(false);

        // Wipe all 256x512 (131072) bits starting from the screen's base
        // address.
        let x = 0;
        while (x < 512) {
            let y = 0;
            while (y < 256) {
                do Screen.drawPixel(x, y);
                let y = y + 1;
            }
            let x = x + 1;
        }

        // Flip the colour back on.
        do Screen.setColor(true);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let colour = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int pixelGroupAddress, pixelValues, pixelPosition;
        let pixelGroupAddress = screenBaseAddress + (y * 32) + (x / 16);
        let pixelValues = Memory.peek(pixelGroupAddress);
        let pixelPosition = x - ((x / 16) * 16);
        if (colour) {
            let pixelValues = pixelValues | powersOfTwo[pixelPosition];
        } else {
            let pixelValues = pixelValues & (~powersOfTwo[pixelPosition]);
        }
        do Memory.poke(pixelGroupAddress, pixelValues);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff, tmp;

        if ((x1 > x2) & (y1 > y2)) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        if ((x1 > x2) & (y1 < y2)) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;

        let a = 0;
        let b = 0;
        let diff = 0;

        // Handle horizontal line-drawing separately
        if (y1 = y2) {
            if (dx > 0) {
                let x = Math.min(x1, x2);
                while (a < dx) {
                    do Screen.drawPixel(x + a, y);
                    let a = a + 1;
                }
            } else {
                let x = Math.min(x1, x2);
                while (a < -dx) {
                    do Screen.drawPixel(x + a, y);
                    let a = a + 1;
                }
            }
        } else {
            // Handle vertical line-drawing separately.
            if (x1 = x2) {
                let y = Math.min(y1, y2);
                if (dy > 0) {
                    while (b < dy) {
                        do Screen.drawPixel(x, y + b);
                        let b = b + 1;
                    }
                } else {
                    while (b < -dy) {
                        do Screen.drawPixel(x, y + b);
                        let b = b + 1;
                    }
                }
            } else {
                if (dy < 0) {
                    while ((a < (dx + 1)) & (b < (-dy + 1))) {
                        do Screen.drawPixel(x + a, y - b);
                        if (diff < 0) {
                            let a = a + 1;
                            let diff = diff - dy;
                        } else {
                            let b = b + 1;
                            let diff = diff - dx;
                        }
                    }
                } else {
                    while ((a < (dx + 1)) & (b < (dy + 1))) {
                        do Screen.drawPixel(x + a, y + b);
                        if (diff < 0) {
                            let a = a + 1;
                            let diff = diff + dy;
                        } else {
                            let b = b + 1;
                            let diff = diff - dx;
                        }
                    }
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (y < (y2 + 1)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;    
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, leftBound, rightBound;
        
        // Starting from the top, continually stack lines atop each other from
        // -r to r.
        let dy = -r;
        while (dy < (r + 1)) {
            let leftBound = x - Math.sqrt((r * r) - (dy * dy));
            let rightBound = x + Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(leftBound, y + dy, rightBound, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
