class TaskTracker {
    field Array _tasks;
    field int _num_tasks;
    static int MAX_NUM_TASKS;

    constructor TaskTracker new() {
        let MAX_NUM_TASKS = 10;
        let _tasks = Array.new(MAX_NUM_TASKS);
        let _num_tasks = 0;
        return this;
    }

    method void dispose() {
        // Dispose all tasks.
        var int i;
        var Task curr_task;
        let i = 0;
        while (i < _num_tasks) {
            let curr_task = _tasks[i];
            do curr_task.dispose();
            let i = i + 1;
        }

        // Dispose self.
        do Memory.deAlloc(this);
        return;
    }

    // Returns false if the tracker should be terminated.
    // Assumes a valid command is always given.
    method boolean process_command(String command) {
        var Array tokens;
        var int i;
        let i = 0;
        let tokens = tokenise(command);
        
        do Screen.clearScreen();
        do Output.moveCursor(0, 0);

        if ((str_is_equal(tokens[0], "ADD"))) {
            do Output.printString("Tracking a new task.");
            do Output.printChar(String.newLine());
            do add_task(tokens[1]);
            do show_all_tasks();
        } 
        if ((str_is_equal(tokens[0], "COMPLETE"))) {
            do Output.printString("Well done.");
            do Output.printChar(String.newLine());
            do complete_task(String.intValue(tokens[1]));
            do show_all_tasks();
        }
        if ((str_is_equal(tokens[0], "UPDATE"))) {
            do Output.printString("Updating a task.");
            do Output.printChar(String.newLine());
            do update_task(tokens[2], String.intValue(tokens[1]));
            do show_all_tasks();
        }
        if ((str_is_equal(tokens[0], "EXIT"))) {
            do Output.printString("Goodbye!");
            do Output.printChar(String.newLine());
            return false;
        }
        return true;
    }

    method void add_task(String task) {
        var Task new_task;
        if ((_num_tasks > 9)) {
            do Output.printString("Too many tasks");
            do Output.printChar(String.newLine());
        } else {
            let _num_tasks = _num_tasks + 1;
            let new_task = Task.new(task, _num_tasks);
            let _tasks[_num_tasks - 1] = new_task;
        }
        return;
    }

    method void complete_task(int id) {
        var Task target_task;
        let target_task = _tasks[id];
        do target_task.complete();
        return;
    }

    method void update_task(String new_task, int id) {
        var Task target_task;
        let target_task = _tasks[id];
        do target_task.update_task(new_task);
        return;
    }

    method void show_all_tasks() {
        var Task curr_task;
        var int i;

        do Output.printString("|===== Tasks =====|");
        do Output.printChar(String.newLine());
        if ((_num_tasks = 0)) {
            do Output.printString("(No tasks being tracked)");
            do Output.printChar(String.newLine());
            return;
        }

        let i = 0;
        while (i < _num_tasks) {
            let curr_task = _tasks[i];
            do Output.printString(" ");
            do Output.printInt(i);
            do Output.printString(") ");
            do Output.printString(curr_task.get_task());
            do Output.printChar(String.newLine());
            let i = i + 1;
        }

        return;
    }

    // Helpers.
    method boolean str_is_equal(String s, String t) {
        var int i;
        if (~(s.length() = t.length())) {
            return false;
        } else {
            let i = 0;
            while ((i < s.length())) {
                if (~(s.charAt(i) = t.charAt(i))) {
                    return false;
                }
                let i = i + 1;
            }
        }
        return true;
    }

    method String extract_range(String s, int lo, int hi) {
        var int i;
        var String token;
        let i = lo;
        let token = String.new(64);

        while ((i < hi)) {
            let token = token.appendChar(s.charAt(i));
            let i = i + 1;
        }
        return token;
    }

    method Array tokenise(String command) {
        var Array arr;
        var int i;
        var int prev_index;
        var int token_count;

        let arr = Array.new(3);
        let i = 0;
        let prev_index = 0;
        let token_count = 0;

        while ((i < command.length())) {
            if (command.charAt(i) = 32) {
                do Output.printString("Extracting token");
                do Output.printChar(String.newLine());
                let arr[token_count] = extract_range(command, prev_index, i);
                let prev_index = i;
                let token_count = token_count + 1;
            }
            let i = i + 1;
        }
        let arr[token_count] = extract_range(command, prev_index, command.length());
        return arr;
    }
}