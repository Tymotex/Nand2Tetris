// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // If the MSB is 0, then the instruction is an A-instruction.
    // Otherwise, it's a C-instruction which may write to register A as a
    // destination.
    Mux16(a=instruction, b=finalOutM, sel=instruction[15], out=inRegA);
    
    // ===== A-Register =====
    // If the instruction is an A-instruction OR the destination bits signify
    // to write into the A-register, then enable `load`.
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=shouldLoadA);
    ARegister(in=inRegA, load=shouldLoadA, out=outA);

    Or16To15(a=outA, b=false, out=addressM);

    // ===== D-Register =====
    // If the destination bits indicate to write into the D-register, then 
    // enable `load`.
    DRegister(in=finalOutM, load=instruction[4], out=outD);

    // ===== Deciding between A or M as input into the ALU =====
    Mux16(a=outA, b=inM, sel=instruction[12], out=oneOfAorM);

    // ===== ALU =====
    ALU(x=outD, y=oneOfAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=finalOutM, zr=aluOutputIsZero, ng=aluOutputIsNegative);
    Or16(a=finalOutM, b=false, out=outM);

    // ===== Write M =====
    // If the instruction says to write to M (instruction[3] bit is on) AND
    // the instruction is a C-instruction, then assert writeM.
    Or(a=instruction[3], b=false, out=writingToM);
    And(a=writingToM, b=instruction[15], out=writeM);

    // ===== PC Register =====
    // Using ShouldJump, we determine whether or not to enable `load` for the
    // PC register and whether the `inc` input should be 1 or 0.
    ShouldJump(jumpBits=instruction[0..2], aluOutputIsZero=aluOutputIsZero, aluOutputIsNegative=aluOutputIsNegative, shouldJump=shouldJump);
    And(a=shouldJump, b=instruction[15], out=pcShouldLoad);
    Not(in=pcShouldLoad, out=pcShouldNotLoad);
    Not(in=reset, out=dontReset);
    And(a=pcShouldNotLoad, b=dontReset, out=pcShouldInc);
    PC(in=outA, load=pcShouldLoad, inc=pcShouldInc, reset=reset, out=pcOut);

    Or16To15(a=pcOut, b=false, out=pc);
}